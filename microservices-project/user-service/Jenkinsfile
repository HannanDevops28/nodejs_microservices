pipeline {
  agent any
  tools { nodejs 'NodeJS 18' }

  environment {
    IMAGE_NAME    = 'user-service'
    AWS_REGION    = 'ap-south-1'
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'dev', url: 'https://github.com/HannanDevops28/nodejs_microservices.git'
      }
    }
    stage('Install') {
      steps {
        sh 'cd microservices-project/user-service && npm install'
      }
    }
    stage('Build') {
      steps {
        sh 'cd microservices-project/user-service && docker build -t $IMAGE_NAME .'
      }
    }
 stage('ECR Login & Push') {
  steps {
    withAWS(credentials: 'aws-ecr-creds', region: "${AWS_REGION}") {
      sh '''
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        ECR_REPO="$AWS_ACCOUNT_ID.dkr.ecr.${AWS_REGION}.amazonaws.com/${IMAGE_NAME}"
        TAG="latest"

        # Login to ECR
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

        # Tag and push
        docker tag $IMAGE_NAME:$TAG $ECR_REPO:$TAG
        docker push $ECR_REPO:$TAG

        # Export for Ansible stage
        echo "ECR_REPO=$ECR_REPO" >> ecr_env.sh
      '''
    }
  }
}


stage('Deploy with Ansible') {
  steps {
    withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-ssh-key', keyFileVariable: 'SSH_KEY')]) {
      sh '''
        #!/bin/bash
        INSTANCE_IP=35.154.100.134

        # Load exported vars from previous stage
        . ecr_env.sh

        echo "[ec2]" > infra/ansible/inventory.ini
        echo "$INSTANCE_IP ansible_user=ec2-user" >> infra/ansible/inventory.ini

        ansible-playbook \
          -i infra/ansible/inventory.ini \
          infra/ansible/playbook.yml \
          --extra-vars "ecr_repo_url=$ECR_REPO image_name=$IMAGE_NAME region=$AWS_REGION" \
          --private-key $SSH_KEY \
          --ssh-extra-args "-o StrictHostKeyChecking=no"
      '''
    }
  }
}





  }
}


