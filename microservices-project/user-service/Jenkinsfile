// pipeline {
//   agent any

//   tools {
//     nodejs 'NodeJS 18'
//   }

//   environment {
//     IMAGE_NAME = "user-service"
//     DOCKERHUB_REPO = "hannanahmed/user-service"
//   }

//   stages {
//     stage('Checkout Code') {
//       steps {
//         git branch: 'dev', url: 'https://github.com/HannanDevops28/nodejs_microservices.git'
//       }
//     }

//     stage('Install Dependencies') {
//       steps {
//         sh 'cd microservices-project/user-service && npm install'
//       }
//     }

//     stage('Test') {
//       steps {
//         echo "‚úÖ Test skipped (add later)"
//       }
//     }

//     stage('Build Docker Image') {
//       steps {
//         sh 'cd microservices-project/user-service && docker build -t $IMAGE_NAME .'
//       }
//     }

//     stage('Push to DockerHub') {
//       steps {
//         withDockerRegistry([credentialsId: 'dockerhub-credentials-id', url: '']) {
//           sh '''
//             cd microservices-project/user-service
//             docker tag $IMAGE_NAME $DOCKERHUB_REPO:latest
//             docker push $DOCKERHUB_REPO:latest
//           '''
//         }
//       }
//     }
//   }

//   post {
//     success {
//       echo "üéâ Build and Push successful!"
//     }
//     failure {
//       echo "‚ùå Build failed"
//     }
//   }
// }
pipeline {
  agent any
  tools { nodejs 'NodeJS 18' }

  environment {
    IMAGE_NAME    = 'user-service'
    AWS_REGION    = 'ap-south-1'
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'dev', url: 'https://github.com/HannanDevops28/nodejs_microservices.git'
      }
    }
    stage('Install') {
      steps {
        sh 'cd microservices-project/user-service && npm install'
      }
    }
    stage('Build') {
      steps {
        sh 'cd microservices-project/user-service && docker build -t $IMAGE_NAME .'
      }
    }
    stage('ECR Login & Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'aws-ecr-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
          sh '''
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_REGION
            AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            ECR_URL=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME
            docker tag $IMAGE_NAME:latest $ECR_URL:latest
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URL
            docker push $ECR_URL:latest
          '''
        }
      }
    } 
    stage('Deploy with Ansible') {
      steps {
        sh '''
          INSTANCE_IP=$(terraform -chdir=terraform output -raw instance_ip)
          ansible-playbook -i ansible/inventory.ini ansible/playbook.yml --extra-vars "ecr_repo_url=$ECR_URL image_name=$IMAGE_NAME instance_ip=$INSTANCE_IP"
        '''
      }
    }
  }
}
