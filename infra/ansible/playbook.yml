- hosts: ec2
  become: true
  vars:
    region: ap-south-1
    image_name: user-service
    ecr_repo_url: add-your-ecr-repo-url
    ecr_registry: add-your-ecr-registory-url
    container_port: 3000
    host_port: 3000
    duckdns_token: add-your-duck-dns-token
    duckdns_domain: your-domain
    email: your-email

  tasks:
    - name: Update apt cache and upgrade packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install required system packages
      apt:
        name:
          - awscli
          - docker.io
          - nginx
          - curl
          - python3
          - python3-pip
          - software-properties-common
        state: present

    - name: Install Certbot via snap (recommended for Ubuntu 22+)
      snap:
        name: certbot
        classic: yes

    - name: Ensure pip is upgraded
      pip:
        name: pip
        executable: pip3
        state: latest

    - name: Start and enable Docker
      service:
        name: docker
        state: started
        enabled: true

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Start and enable NGINX
      service:
        name: nginx
        state: started
        enabled: true

    - name: Create DuckDNS DNS auth script
      copy:
        dest: /opt/duckdns_auth.sh
        mode: '0700'
        content: |
          #!/bin/bash
          curl -k "https://www.duckdns.org/update?domains={{ duckdns_domain }}&token={{ duckdns_token }}&txt=$CERTBOT_VALIDATION"
          sleep 20

    - name: Create DuckDNS DNS cleanup script
      copy:
        dest: /opt/duckdns_cleanup.sh
        mode: '0700'
        content: |
          #!/bin/bash
          curl -k "https://www.duckdns.org/update?domains={{ duckdns_domain }}&token={{ duckdns_token }}&txt="
          sleep 10

    - name: Obtain SSL certificate with Certbot
      shell: >
        certbot certonly
        --manual
        --preferred-challenges dns
        --manual-auth-hook /opt/duckdns_auth.sh
        --manual-cleanup-hook /opt/duckdns_cleanup.sh
        --email {{ email }}
        --agree-tos
        --no-eff-email
        -d {{ duckdns_domain }}.duckdns.org
      args:
        creates: "/etc/letsencrypt/live/{{ duckdns_domain }}.duckdns.org/fullchain.pem"

    - name: Configure NGINX for HTTPS reverse proxy
      copy:
        dest: /etc/nginx/sites-available/default
        content: |
          server {
              listen 80;
              server_name {{ duckdns_domain }}.duckdns.org;
              return 301 https://$host$request_uri;
          }

          server {
              listen 443 ssl;
              server_name {{ duckdns_domain }}.duckdns.org;

              ssl_certificate /etc/letsencrypt/live/{{ duckdns_domain }}.duckdns.org/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/{{ duckdns_domain }}.duckdns.org/privkey.pem;

              location / {
                  proxy_pass http://localhost:{{ container_port }};
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
      notify: Reload NGINX

    - name: Login to AWS ECR
      shell: >
        aws ecr get-login-password --region {{ region }} |
        docker login --username AWS --password-stdin {{ ecr_registry }}
      register: ecr_login
      changed_when: false
      failed_when: "'Login Succeeded' not in ecr_login.stdout"

    - name: Pull Docker image
      shell: docker pull "{{ ecr_repo_url }}:latest"
      register: docker_pull
      changed_when: "'Downloaded newer image' in docker_pull.stdout or 'Image is up to date' in docker_pull.stdout"

    - name: Stop running container if exists
      shell: docker stop {{ image_name }}
      ignore_errors: true

    - name: Remove container if exists
      shell: docker rm {{ image_name }}
      ignore_errors: true

    - name: Run Docker container
      shell: >
        docker run -d
        -p {{ host_port }}:{{ container_port }}
        --name {{ image_name }}
        "{{ ecr_repo_url }}:latest"

  handlers:
    - name: Reload NGINX
      service:
        name: nginx
        state: restarted
